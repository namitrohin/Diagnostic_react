import { Button } from "@material-ui/core";
import moment from "moment";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import {
  buttonLoader,
  showErrorToast,
  showSuccessToast,
} from "../../../components/common";
import { TablePicker } from "../../../components/table-picker";
import { CommonController } from "../../../_redux/controller/common.controller";

const AddTicketCommercial = ({ changeTab, previewId, ...props }) => {
  const [selectedTicket, setSelectedTicket] = useState(null);

  const [loading, setLoading] = useState(false);

  const [showPicker, setShowPicker] = useState(false);

  const togglePicker = () => setShowPicker(!showPicker);

  const [errors, setErrors] = useState({});

  const [formData, setFormData] = useState({
    tran_id: previewId ? previewId : "0",
    ticket_id: "",
    date: moment().format("DD-MM-yyyy"),
    charges: "",
    remarks: "",
    user_id: localStorage.getItem("userId"),
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const validateForm = () => {
    let errors = {};
    if (formData.charges == "") {
      errors.charges = "Charges required";
    } else {
      delete errors.charges;
    }

    if (formData.remarks == "") {
      errors.remarks = "Remarks required";
    } else {
      delete errors.remarks;
    }

    const valid = Object.keys(errors).length === 0 ? true : false;
    setErrors(errors);
    return valid;
  };

  const onSubmit = async () => {
    try {
      setLoading(true);
      if (validateForm()) {
        await CommonController.commonApiCallFilter(
          "TicketCommercial/TicketCommericialInsert",
          formData,
          "post"
        ).then((data) => {
          if (data.valid) {
            showSuccessToast("Ticket Commercial Successfully");
            changeTab(0);
          } else {
            showErrorToast(data.msg);
          }
        });
      }
      setLoading(false);
    } catch (err) {
      showErrorToast(err);
    }
  };

  const getTicketById = async () => {
    try {
      await CommonController.commonApiCallFilter(
        "TicketCommercial/TicketCommericialPreview",
        { tran_id: previewId },
        "post"
      ).then((data) => {
        setSelectedTicket(data);
        setFormData({
          ...formData,
          charges: data.charges,
          remarks: data.remarks,
          ticket_id: data.ticket_id,
        });
      });
    } catch (err) {
      showErrorToast(err);
    }
  };

  useEffect(() => {
    if (previewId) {
      getTicketById();
    }
  }, [previewId]);

  const newColumns = [
    {
      id: "id",
      label: "Sr. no",
      numeric: false,
      disablePadding: true,
    },
    {
      id: "date",
      label: "Date",
      numeric: false,
      disablePadding: true,
    },
    {
      id: "ticket_no",
      label: "Ticket No",
      numeric: false,
      disablePadding: true,
    },
    {
      id: "menu",
      label: "Menu",
      numeric: false,
      disablePadding: true,
    },
    {
      id: "transaction",
      label: "Transaction",
      numeric: false,
      disablePadding: true,
    },
    {
      id: "type",
      label: "Type",
      numeric: false,
      disablePadding: true,
    },
    {
      id: "priority",
      label: "Priority",
      numeric: false,
      disablePadding: true,
    },
    {
      id: "details",
      label: "Details",
      numeric: false,
      disablePadding: true,
    },
    {
      id: "generated_by",
      label: "Generated By",
      numeric: false,
      disablePadding: true,
    },
    {
      id: "status",
      label: "Status",
      numeric: false,
      disablePadding: true,
    },
  ];

  const handlePickTicket = (ticket) => {
    setFormData({ ...formData, ticket_id: String(ticket.id) });
    setSelectedTicket(ticket);
    setShowPicker(false);
  };

  return (
    <div className="container-fluid mt-5">
      <div className="row">
        <div className="col-md-12 text-right">
          {!showPicker && (
            <Button
              variant="contained"
              onClick={togglePicker}
              disableElevation
              color="primary"
            >
              Pick Ticket
            </Button>
          )}
          {showPicker && (
            <TablePicker
              selectedItems={selectedTicket}
              columns={newColumns}
              type="single"
              url={"TicketCommercial/PickTicketInCommercial"}
              onSubmit={handlePickTicket}
              onPickerClose={togglePicker}
            />
          )}
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Ticket Date</label>
            <p>
              {selectedTicket && selectedTicket.date != ""
                ? selectedTicket.date
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Ticket No.</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.ticket_no != ""
                ? selectedTicket.ticket_no
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Generated By</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.generated_by != ""
                ? selectedTicket.generated_by
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Menu</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.menu != ""
                ? selectedTicket.menu
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Transaction</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.transaction != ""
                ? selectedTicket.transaction
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Type</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.type != ""
                ? selectedTicket.type
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Priority</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.priority != ""
                ? selectedTicket.priority
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Details</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.details != ""
                ? selectedTicket.details
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Date</label>
            <input
              type="text"
              className="form-control w-75"
              value={formData.date}
              disabled
            />
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Charges</label>
            <input
              type="text"
              className="form-control w-75"
              name="charges"
              value={formData.charges}
              onChange={handleChange}
            />
            {errors.charges && <p className="text-danger">{errors.charges}</p>}
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Remarks</label>
            <textarea
              type="text"
              value={formData.remarks}
              name="remarks"
              onChange={handleChange}
              className="form-control w-75"
            ></textarea>
            {errors.remarks && <p className="text-danger">{errors.remarks}</p>}
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Approved Date</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.approved_date != ""
                ? selectedTicket.approved_date
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Approved Charges</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.approved_charges != ""
                ? selectedTicket.approved_charges
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-3">
          <div className="form-group">
            <label className="font-weight-bold">Approved Remarks</label>
            <p>
              {" "}
              {selectedTicket && selectedTicket.approved_remarks != ""
                ? selectedTicket.approved_remarks
                : "N/A"}
            </p>
          </div>
        </div>
        <div className="col-md-12 text-right">
          <Button
            variant="contained"
            onClick={() => changeTab(0)}
            className="mr-2"
            disableElevation
          >
            Cancel
          </Button>
          {buttonLoader(loading, "Submit", onSubmit, "primary")}
        </div>
      </div>
    </div>
  );
};

export default AddTicketCommercial;

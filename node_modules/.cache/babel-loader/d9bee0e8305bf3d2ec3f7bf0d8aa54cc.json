{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { getUserRightList, getUserRightListResponse, setSelectedMenu, selectedMenuResponse, setSelectedSubMenu, selectedSubMenuResponse, getUserFilterListSuccess, getUserFilterList } from '../actions/common.action';\nimport { CommonController } from \"../controller/common.controller\";\n\nfunction* fetchUserRightListSaga() {\n  try {\n    const _checkUserCred = yield CommonController.getUserRightsList();\n\n    yield put(getUserRightListResponse(_checkUserCred));\n  } catch (error) {\n    yield null;\n    yield put(getUserRightListResponse(error));\n  }\n}\n\nfunction* setSelectedMenuSaga(action) {\n  try {\n    yield put(selectedMenuResponse(action.payload));\n  } catch (error) {\n    yield null;\n    yield put(selectedMenuResponse(error));\n  }\n}\n\nfunction* setSelectedSubMenuSaga(action) {\n  try {\n    yield put(selectedSubMenuResponse(action.payload));\n  } catch (error) {\n    yield null;\n    yield put(selectedSubMenuResponse(error));\n  }\n}\n\nfunction* getCurrentUserFiltersSaga(action) {\n  try {\n    const response = yield CommonController.getUserFilterList();\n    yield put(getUserFilterListSuccess(response));\n  } catch (error) {\n    yield null;\n    yield put(getUserFilterListSuccess(error));\n  }\n}\n\nexport default function* CommonSaga() {\n  try {\n    yield takeLatest(getUserRightList, fetchUserRightListSaga);\n    yield takeLatest(setSelectedMenu, setSelectedMenuSaga);\n    yield takeLatest(setSelectedSubMenu, setSelectedSubMenuSaga);\n    yield takeLatest(getUserFilterList, getCurrentUserFiltersSaga);\n  } catch (e) {\n    yield null;\n  }\n}\n_c = CommonSaga;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommonSaga\");","map":{"version":3,"sources":["F:/React code/diagnostic/src/_redux/middleware/common.saga.js"],"names":["put","takeLatest","getUserRightList","getUserRightListResponse","setSelectedMenu","selectedMenuResponse","setSelectedSubMenu","selectedSubMenuResponse","getUserFilterListSuccess","getUserFilterList","CommonController","fetchUserRightListSaga","_checkUserCred","getUserRightsList","error","setSelectedMenuSaga","action","payload","setSelectedSubMenuSaga","getCurrentUserFiltersSaga","response","CommonSaga","e"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,SAASC,gBAAT,EAA4BC,wBAA5B,EAAsDC,eAAtD,EAAuEC,oBAAvE,EAA6FC,kBAA7F,EAAiHC,uBAAjH,EAA0IC,wBAA1I,EAAoKC,iBAApK,QAA6L,0BAA7L;AACA,SAASC,gBAAT,QAAiC,iCAAjC;;AAGA,UAAUC,sBAAV,GAAoC;AAChC,MAAI;AACA,UAAMC,cAAc,GAAG,MAAMF,gBAAgB,CAACG,iBAAjB,EAA7B;;AACA,UAAMb,GAAG,CAACG,wBAAwB,CAACS,cAAD,CAAzB,CAAT;AACH,GAHD,CAGE,OAAOE,KAAP,EAAc;AACZ,UAAM,IAAN;AACA,UAAMd,GAAG,CAACG,wBAAwB,CAACW,KAAD,CAAzB,CAAT;AACH;AACJ;;AAED,UAAUC,mBAAV,CAA+BC,MAA/B,EAAuC;AACnC,MAAI;AACA,UAAMhB,GAAG,CAACK,oBAAoB,CAACW,MAAM,CAACC,OAAR,CAArB,CAAT;AACH,GAFD,CAEE,OAAOH,KAAP,EAAc;AACZ,UAAM,IAAN;AACA,UAAMd,GAAG,CAACK,oBAAoB,CAACS,KAAD,CAArB,CAAT;AACH;AACJ;;AAED,UAAUI,sBAAV,CAAkCF,MAAlC,EAA0C;AACtC,MAAI;AACA,UAAMhB,GAAG,CAACO,uBAAuB,CAACS,MAAM,CAACC,OAAR,CAAxB,CAAT;AACH,GAFD,CAEE,OAAOH,KAAP,EAAc;AACZ,UAAM,IAAN;AACA,UAAMd,GAAG,CAACO,uBAAuB,CAACO,KAAD,CAAxB,CAAT;AACH;AACJ;;AAED,UAAUK,yBAAV,CAAqCH,MAArC,EAA6C;AACzC,MAAI;AACA,UAAMI,QAAQ,GAAG,MAAMV,gBAAgB,CAACD,iBAAjB,EAAvB;AACA,UAAMT,GAAG,CAACQ,wBAAwB,CAACY,QAAD,CAAzB,CAAT;AACH,GAHD,CAGE,OAAON,KAAP,EAAc;AACZ,UAAM,IAAN;AACA,UAAMd,GAAG,CAACQ,wBAAwB,CAACM,KAAD,CAAzB,CAAT;AACH;AACJ;;AAED,eAAe,UAAUO,UAAV,GAAwB;AACnC,MAAI;AACA,UAAMpB,UAAU,CAACC,gBAAD,EAAmBS,sBAAnB,CAAhB;AACA,UAAMV,UAAU,CAACG,eAAD,EAAkBW,mBAAlB,CAAhB;AACA,UAAMd,UAAU,CAACK,kBAAD,EAAqBY,sBAArB,CAAhB;AACA,UAAMjB,UAAU,CAACQ,iBAAD,EAAoBU,yBAApB,CAAhB;AACH,GALD,CAMA,OAAMG,CAAN,EAAQ;AACJ,UAAM,IAAN;AACH;AACJ;KAVwBD,U","sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { getUserRightList , getUserRightListResponse, setSelectedMenu, selectedMenuResponse, setSelectedSubMenu, selectedSubMenuResponse, getUserFilterListSuccess, getUserFilterList } from '../actions/common.action';\r\nimport { CommonController } from \"../controller/common.controller\";\r\n\r\n\r\nfunction* fetchUserRightListSaga () {\r\n    try {   \r\n        const _checkUserCred = yield CommonController.getUserRightsList();\r\n        yield put(getUserRightListResponse(_checkUserCred));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getUserRightListResponse(error));\r\n    }\r\n}\r\n\r\nfunction* setSelectedMenuSaga (action) {\r\n    try {\r\n        yield put(selectedMenuResponse(action.payload));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(selectedMenuResponse(error));\r\n    }\r\n}\r\n\r\nfunction* setSelectedSubMenuSaga (action) {\r\n    try {\r\n        yield put(selectedSubMenuResponse(action.payload));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(selectedSubMenuResponse(error));\r\n    }\r\n}\r\n\r\nfunction* getCurrentUserFiltersSaga (action) {\r\n    try {\r\n        const response = yield CommonController.getUserFilterList();\r\n        yield put(getUserFilterListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getUserFilterListSuccess(error));\r\n    }\r\n}\r\n\r\nexport default function* CommonSaga () {\r\n    try {\r\n        yield takeLatest(getUserRightList, fetchUserRightListSaga);\r\n        yield takeLatest(setSelectedMenu, setSelectedMenuSaga);\r\n        yield takeLatest(setSelectedSubMenu, setSelectedSubMenuSaga);\r\n        yield takeLatest(getUserFilterList, getCurrentUserFiltersSaga);\r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
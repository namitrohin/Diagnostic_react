{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { checkAuthCred, requestStatus, checkAuthCredResponse, checkAuthOTP, checkAuthOTPResponse, getDecryptUserIdResponse, getDecryptUserId } from '../actions/auth.action';\nimport { AuthController } from \"../controller/auth.controller\";\n\nfunction* CheckUserCredSaga(action) {\n  try {\n    yield put(requestStatus(true));\n\n    const _checkUserCred = yield AuthController.checkUserCred(action.payload);\n\n    yield put(checkAuthCredResponse(_checkUserCred));\n    yield put(requestStatus(false));\n  } catch (error) {\n    yield null;\n    yield put(checkAuthCredResponse(error));\n  }\n}\n\n_c = CheckUserCredSaga;\n\nfunction* CheckUserCredOTP(action) {\n  try {\n    const _checkUserOtp = yield AuthController.checkAuthOTP(action.payload);\n\n    yield put(checkAuthOTPResponse(_checkUserOtp));\n  } catch (error) {\n    yield null;\n    yield put(checkAuthOTPResponse(error));\n  }\n}\n\n_c2 = CheckUserCredOTP;\n\nfunction* getDecryptUserIdSaga(action) {\n  try {\n    const decryptUserDetails = yield AuthController.getDecryptUserDetails(action.payload);\n    yield put(getDecryptUserIdResponse(decryptUserDetails));\n  } catch (error) {\n    yield null;\n    yield put(getDecryptUserIdResponse(error));\n  }\n}\n\nexport default function* AuthSaga() {\n  try {\n    yield takeLatest(checkAuthCred, CheckUserCredSaga);\n    yield takeLatest(checkAuthOTP, CheckUserCredOTP);\n    yield takeLatest(getDecryptUserId, getDecryptUserIdSaga);\n  } catch (e) {\n    yield null;\n  }\n}\n_c3 = AuthSaga;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CheckUserCredSaga\");\n$RefreshReg$(_c2, \"CheckUserCredOTP\");\n$RefreshReg$(_c3, \"AuthSaga\");","map":{"version":3,"sources":["F:/React code/diagnostic/src/_redux/middleware/auth.saga.js"],"names":["put","takeLatest","checkAuthCred","requestStatus","checkAuthCredResponse","checkAuthOTP","checkAuthOTPResponse","getDecryptUserIdResponse","getDecryptUserId","AuthController","CheckUserCredSaga","action","_checkUserCred","checkUserCred","payload","error","CheckUserCredOTP","_checkUserOtp","getDecryptUserIdSaga","decryptUserDetails","getDecryptUserDetails","AuthSaga","e"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,SAASC,aAAT,EAAyBC,aAAzB,EAAyCC,qBAAzC,EAAgEC,YAAhE,EAA+EC,oBAA/E,EAAqGC,wBAArG,EAA+HC,gBAA/H,QAAuJ,wBAAvJ;AACA,SAASC,cAAT,QAA+B,+BAA/B;;AAGA,UAAUC,iBAAV,CAA6BC,MAA7B,EAAqC;AACjC,MAAI;AACA,UAAMX,GAAG,CAACG,aAAa,CAAC,IAAD,CAAd,CAAT;;AACA,UAAMS,cAAc,GAAG,MAAMH,cAAc,CAACI,aAAf,CAA6BF,MAAM,CAACG,OAApC,CAA7B;;AACA,UAAMd,GAAG,CAACI,qBAAqB,CAACQ,cAAD,CAAtB,CAAT;AACA,UAAMZ,GAAG,CAACG,aAAa,CAAC,KAAD,CAAd,CAAT;AACH,GALD,CAKE,OAAOY,KAAP,EAAc;AACZ,UAAM,IAAN;AACA,UAAMf,GAAG,CAACI,qBAAqB,CAACW,KAAD,CAAtB,CAAT;AACH;AACJ;;KAVSL,iB;;AAYV,UAAUM,gBAAV,CAA4BL,MAA5B,EAAoC;AAChC,MAAI;AACA,UAAMM,aAAa,GAAG,MAAMR,cAAc,CAACJ,YAAf,CAA4BM,MAAM,CAACG,OAAnC,CAA5B;;AACA,UAAMd,GAAG,CAACM,oBAAoB,CAACW,aAAD,CAArB,CAAT;AACH,GAHD,CAGE,OAAOF,KAAP,EAAc;AACZ,UAAM,IAAN;AACA,UAAMf,GAAG,CAACM,oBAAoB,CAACS,KAAD,CAArB,CAAT;AACH;AACJ;;MARSC,gB;;AAUV,UAAUE,oBAAV,CAAgCP,MAAhC,EAAwC;AACpC,MAAI;AACA,UAAMQ,kBAAkB,GAAG,MAAMV,cAAc,CAACW,qBAAf,CAAqCT,MAAM,CAACG,OAA5C,CAAjC;AACA,UAAMd,GAAG,CAACO,wBAAwB,CAACY,kBAAD,CAAzB,CAAT;AACH,GAHD,CAGE,OAAOJ,KAAP,EAAc;AACZ,UAAM,IAAN;AACA,UAAMf,GAAG,CAACO,wBAAwB,CAACQ,KAAD,CAAzB,CAAT;AACH;AACJ;;AAGD,eAAe,UAAUM,QAAV,GAAsB;AACjC,MAAI;AACA,UAAMpB,UAAU,CAACC,aAAD,EAAgBQ,iBAAhB,CAAhB;AACA,UAAMT,UAAU,CAACI,YAAD,EAAeW,gBAAf,CAAhB;AACA,UAAMf,UAAU,CAACO,gBAAD,EAAmBU,oBAAnB,CAAhB;AACH,GAJD,CAKA,OAAMI,CAAN,EAAQ;AACJ,UAAM,IAAN;AACH;AACJ;MATwBD,Q","sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { checkAuthCred , requestStatus , checkAuthCredResponse, checkAuthOTP , checkAuthOTPResponse, getDecryptUserIdResponse, getDecryptUserId } from '../actions/auth.action';\r\nimport { AuthController } from \"../controller/auth.controller\";\r\n\r\n\r\nfunction* CheckUserCredSaga (action) {\r\n    try {   \r\n        yield put(requestStatus(true));\r\n        const _checkUserCred = yield AuthController.checkUserCred(action.payload);\r\n        yield put(checkAuthCredResponse(_checkUserCred));\r\n        yield put(requestStatus(false));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(checkAuthCredResponse(error));\r\n    }\r\n}\r\n\r\nfunction* CheckUserCredOTP (action) {\r\n    try {\r\n        const _checkUserOtp = yield AuthController.checkAuthOTP(action.payload);\r\n        yield put(checkAuthOTPResponse(_checkUserOtp));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(checkAuthOTPResponse(error));\r\n    }\r\n}\r\n\r\nfunction* getDecryptUserIdSaga (action) {\r\n    try {\r\n        const decryptUserDetails = yield AuthController.getDecryptUserDetails(action.payload);\r\n        yield put(getDecryptUserIdResponse(decryptUserDetails));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getDecryptUserIdResponse(error));\r\n    }\r\n}\r\n\r\n\r\nexport default function* AuthSaga () {\r\n    try {\r\n        yield takeLatest(checkAuthCred, CheckUserCredSaga);\r\n        yield takeLatest(checkAuthOTP, CheckUserCredOTP);\r\n        yield takeLatest(getDecryptUserId, getDecryptUserIdSaga);\r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { userService } from \"../../services\";\nexport const AuthController = {\n  checkUserCred,\n  checkAuthOTP,\n  getDecryptUserDetails\n};\n\nasync function checkUserCred(payload) {\n  try {\n    let apiEndpoint = `Login/CheckLoging`;\n    let response = await userService.post(apiEndpoint, payload);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function checkAuthOTP(payload) {\n  try {\n    let apiEndpoint = `Auth/token`;\n    let response = await userService.login(apiEndpoint, payload);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function getDecryptUserDetails(payload) {\n  try {\n    let apiEndpoint = `Login/UserLoginByEncryptUserId`;\n    let response = await userService.post(apiEndpoint, payload);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}","map":{"version":3,"sources":["F:/React code/diagnostic/src/_redux/controller/auth.controller.js"],"names":["userService","AuthController","checkUserCred","checkAuthOTP","getDecryptUserDetails","payload","apiEndpoint","response","post","data","status","alert","error","console","log","login"],"mappings":"AAAA,SAASA,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,cAAc,GAAG;AAC1BC,EAAAA,aAD0B;AAE1BC,EAAAA,YAF0B;AAG1BC,EAAAA;AAH0B,CAAvB;;AAOP,eAAeF,aAAf,CAA6BG,OAA7B,EAAsC;AAClC,MAAI;AACA,QAAIC,WAAW,GAAI,mBAAnB;AAEA,QAAIC,QAAQ,GAAG,MAAMP,WAAW,CAACQ,IAAZ,CAAiBF,WAAjB,EAA6BD,OAA7B,CAArB;;AAEA,QAAIE,QAAJ,EAAc;AACV,aAAQA,QAAQ,CAACE,IAAjB;AACH,KAFD,MAGK;AACD,UAAIF,QAAQ,CAACE,IAAT,CAAcC,MAAd,KAAyB,GAA7B,EAAkC;AAC9BC,QAAAA,KAAK,CAACJ,QAAQ,CAACE,IAAV,CAAL;AACH;;AACD,aAAO,IAAP;AACH;AACJ,GAdD,CAeA,OAAOG,KAAP,EAAc;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAO,IAAP;AACH;AACJ;;AAED,eAAeT,YAAf,CAA4BE,OAA5B,EAAqC;AACjC,MAAI;AACA,QAAIC,WAAW,GAAI,YAAnB;AAEA,QAAIC,QAAQ,GAAG,MAAMP,WAAW,CAACe,KAAZ,CAAkBT,WAAlB,EAA8BD,OAA9B,CAArB;;AAEA,QAAIE,QAAJ,EAAc;AACV,aAAQA,QAAQ,CAACE,IAAjB;AACH,KAFD,MAGK;AACD,UAAIF,QAAQ,CAACE,IAAT,CAAcC,MAAd,KAAyB,GAA7B,EAAkC;AAC9BC,QAAAA,KAAK,CAACJ,QAAQ,CAACE,IAAV,CAAL;AACH;;AACD,aAAO,IAAP;AACH;AACJ,GAdD,CAeA,OAAOG,KAAP,EAAc;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAO,IAAP;AACH;AACJ;;AAED,eAAeR,qBAAf,CAAqCC,OAArC,EAA8C;AAC1C,MAAI;AACA,QAAIC,WAAW,GAAI,gCAAnB;AAEA,QAAIC,QAAQ,GAAG,MAAMP,WAAW,CAACQ,IAAZ,CAAiBF,WAAjB,EAA6BD,OAA7B,CAArB;;AAEA,QAAIE,QAAJ,EAAc;AACV,aAAQA,QAAQ,CAACE,IAAjB;AACH,KAFD,MAGK;AACD,UAAIF,QAAQ,CAACE,IAAT,CAAcC,MAAd,KAAyB,GAA7B,EAAkC;AAC9BC,QAAAA,KAAK,CAACJ,QAAQ,CAACE,IAAV,CAAL;AACH;;AACD,aAAO,IAAP;AACH;AACJ,GAdD,CAeA,OAAOG,KAAP,EAAc;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,WAAO,IAAP;AACH;AACJ","sourcesContent":["import { userService } from \"../../services\";\r\n\r\nexport const AuthController = {\r\n    checkUserCred,\r\n    checkAuthOTP,\r\n    getDecryptUserDetails\r\n}\r\n\r\n\r\nasync function checkUserCred(payload) {\r\n    try {\r\n        let apiEndpoint = `Login/CheckLoging`;\r\n\r\n        let response = await userService.post(apiEndpoint,payload);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function checkAuthOTP(payload) {\r\n    try {\r\n        let apiEndpoint = `Auth/token`;\r\n\r\n        let response = await userService.login(apiEndpoint,payload);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function getDecryptUserDetails(payload) {\r\n    try {\r\n        let apiEndpoint = `Login/UserLoginByEncryptUserId`;\r\n\r\n        let response = await userService.post(apiEndpoint,payload);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\n "]},"metadata":{},"sourceType":"module"}
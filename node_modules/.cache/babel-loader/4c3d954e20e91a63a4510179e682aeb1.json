{"ast":null,"code":"import { userService } from \"../../../services\";\nexport const ProductMasterController = {\n  getProductBrowse,\n  getCategoryList,\n  getLPRefList,\n  getGGNameList,\n  updateProductVerifyStatus,\n  updateProductListPrice,\n  updateProductLpRef,\n  updateProductMovingNonMoving\n};\n\nasync function getProductBrowse(params, filters) {\n  try {\n    let apiEndpoint = `Product/ProductMasterBrowse?filter_value=${params.filter_value}&page_number=${params.pageNo}&page_size=${params.pageSize}&sort_column=${params.sort_column}&sort_order=${params.sort_order}`;\n    let response = await userService.post(apiEndpoint, filters);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function getCategoryList() {\n  try {\n    let apiEndpoint = `Dropdown/GetCategoryList`;\n    let response = await userService.post(apiEndpoint);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function getLPRefList() {\n  try {\n    let apiEndpoint = `Dropdown/GetLpRefList`;\n    let response = await userService.post(apiEndpoint);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function getGGNameList() {\n  try {\n    let apiEndpoint = `Dropdown/GetGGList`;\n    let response = await userService.post(apiEndpoint);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function updateProductVerifyStatus(param) {\n  try {\n    let apiEndpoint = `Product/UpdateProductEdit`;\n    let response = await userService.post(apiEndpoint, param);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function updateProductListPrice(param) {\n  try {\n    let apiEndpoint = `Product/UpdateProductListPrice`;\n    let response = await userService.post(apiEndpoint, param);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function updateProductLpRef(param) {\n  try {\n    let apiEndpoint = `Product/UpdateProductLPRef`;\n    let response = await userService.post(apiEndpoint, param);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function updateProductMovingNonMoving(param) {\n  try {\n    let apiEndpoint = `Product/UpdateProductMovingNonMoving`;\n    let response = await userService.post(apiEndpoint, param);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}","map":{"version":3,"sources":["F:/React code/diagnostic/src/_redux/controller/Masters/product.controller.js"],"names":["userService","ProductMasterController","getProductBrowse","getCategoryList","getLPRefList","getGGNameList","updateProductVerifyStatus","updateProductListPrice","updateProductLpRef","updateProductMovingNonMoving","params","filters","apiEndpoint","filter_value","pageNo","pageSize","sort_column","sort_order","response","post","data","status","alert","error","console","log","param"],"mappings":"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","sourcesContent":["import { userService } from \"../../../services\";\r\n\r\nexport const ProductMasterController = {\r\n     getProductBrowse,\r\n     getCategoryList,\r\n     getLPRefList,\r\n     getGGNameList,\r\n     updateProductVerifyStatus,\r\n     updateProductListPrice,\r\n     updateProductLpRef,\r\n     updateProductMovingNonMoving\r\n}\r\n\r\n\r\nasync function getProductBrowse(params , filters) {\r\n    try {\r\n        let apiEndpoint = `Product/ProductMasterBrowse?filter_value=${params.filter_value}&page_number=${params.pageNo}&page_size=${params.pageSize}&sort_column=${params.sort_column}&sort_order=${params.sort_order}`;\r\n        let response = await userService.post(apiEndpoint , filters);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function getCategoryList() {\r\n    try {   \r\n        let apiEndpoint = `Dropdown/GetCategoryList`;\r\n        let response = await userService.post(apiEndpoint);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nasync function getLPRefList() {\r\n    try {   \r\n        let apiEndpoint = `Dropdown/GetLpRefList`;\r\n        let response = await userService.post(apiEndpoint);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function getGGNameList() {\r\n    try {   \r\n        let apiEndpoint = `Dropdown/GetGGList`;\r\n        let response = await userService.post(apiEndpoint);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function updateProductVerifyStatus(param) {\r\n    try {   \r\n        let apiEndpoint = `Product/UpdateProductEdit`;\r\n        let response = await userService.post(apiEndpoint,param);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nasync function updateProductListPrice(param) {\r\n    try {   \r\n        let apiEndpoint = `Product/UpdateProductListPrice`;\r\n        let response = await userService.post(apiEndpoint,param);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nasync function updateProductLpRef(param) {\r\n    try {   \r\n        let apiEndpoint = `Product/UpdateProductLPRef`;\r\n        let response = await userService.post(apiEndpoint,param);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function updateProductMovingNonMoving(param) {\r\n    try {   \r\n        let apiEndpoint = `Product/UpdateProductMovingNonMoving`;\r\n        let response = await userService.post(apiEndpoint,param);\r\n        \r\n        if (response) {\r\n            return (response.data);\r\n        }\r\n        else {\r\n            if (response.data.status !== 500) {\r\n                alert(response.data);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(\"error\", error);\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
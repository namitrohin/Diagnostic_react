{"ast":null,"code":"var _jsxFileName = \"F:\\\\React code\\\\diagnostic\\\\src\\\\pages\\\\Master\\\\Configuration\\\\Account\\\\group\\\\browse.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport CustomPagination from '../../../../../components/CustomPagination';\nimport CustomNoRowsOverlay from '../../../../../components/customRowComponent';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAccountGroupBrowse, selectedConfigGroup } from '../../../../../_redux/actions/masters/configuration.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConfigGroupBrowse = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const configurationLoading = useSelector(state => state.ConfigurationMaster.isLoading);\n  const getGroupListResponse = useSelector(state => state.ConfigurationMaster.groupList);\n  const [groupList, setGroupList] = useState([]);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: '',\n    sort_column: '',\n    sort_order: ''\n  });\n\n  const handlePageSizeChange = param => {\n    setParams({ ...params,\n      pageSize: param.pageSize\n    });\n  };\n\n  const handlePageChange = param => {\n    setParams({ ...params,\n      pageNo: param.page + 1\n    });\n  };\n\n  useEffect(() => {\n    dispatch(getAccountGroupBrowse(params));\n  }, []);\n  useEffect(() => {\n    dispatch(getAccountGroupBrowse(params));\n  }, [params]);\n  useEffect(() => {\n    setIsLoading(configurationLoading);\n\n    if (getGroupListResponse) {\n      setGroupList(getGroupListResponse.data || []);\n    }\n  }, [getGroupListResponse, configurationLoading]);\n\n  const onPreviewOrEdit = row => {\n    dispatch(selectedConfigGroup(row));\n    props.onActionClick(1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 350,\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        pagination: true,\n        disableColumnFilter: true,\n        pageSize: params.pageSize,\n        rowsPerPageOptions: [10, 20, 50, 100],\n        rowCount: getGroupListResponse === null || getGroupListResponse === void 0 ? void 0 : getGroupListResponse.recordsFiltered,\n        paginationMode: \"server\",\n        onPageSizeChange: handlePageSizeChange,\n        onPageChange: handlePageChange,\n        loading: isLoading,\n        rowHeight: 30,\n        components: {\n          Pagination: CustomPagination,\n          NoRowsOverlay: CustomNoRowsOverlay\n        },\n        columns: [{\n          field: 'id',\n          headerName: \"Sr No.\",\n          width: 120\n        }, {\n          field: 'group_id',\n          headerName: \"Group ID\",\n          width: 120\n        }, {\n          field: 'group_name',\n          headerName: \"Group Name\",\n          width: 200\n        }, {\n          field: 'description',\n          headerName: \"Description\",\n          width: 200\n        }, {\n          field: '',\n          headerName: \"Actions\",\n          renderCell: params => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"action_btns\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"far fa-edit mr-2\",\n              onClick: () => onPreviewOrEdit(params.row)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"far fa-trash-alt mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this),\n          width: 150\n        }],\n        rows: getGroupListResponse ? getGroupListResponse.data : []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ConfigGroupBrowse, \"pyvlPMhezkTNvwWRSzsy9s5Ri8g=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ConfigGroupBrowse;\nexport default ConfigGroupBrowse;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigGroupBrowse\");","map":{"version":3,"sources":["F:/React code/diagnostic/src/pages/Master/Configuration/Account/group/browse.js"],"names":["React","useEffect","useState","CustomPagination","CustomNoRowsOverlay","DataGrid","useDispatch","useSelector","getAccountGroupBrowse","selectedConfigGroup","ConfigGroupBrowse","props","dispatch","isLoading","setIsLoading","configurationLoading","state","ConfigurationMaster","getGroupListResponse","groupList","setGroupList","params","setParams","pageNo","pageSize","filter_value","sort_column","sort_order","handlePageSizeChange","param","handlePageChange","page","data","onPreviewOrEdit","row","onActionClick","height","width","recordsFiltered","Pagination","NoRowsOverlay","field","headerName","renderCell"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport CustomPagination from '../../../../../components/CustomPagination';\r\nimport CustomNoRowsOverlay from '../../../../../components/customRowComponent';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAccountGroupBrowse, selectedConfigGroup } from '../../../../../_redux/actions/masters/configuration.action';\r\n\r\nconst ConfigGroupBrowse = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [isLoading , setIsLoading] = useState(false);\r\n    const configurationLoading = useSelector((state) => state.ConfigurationMaster.isLoading);\r\n    const getGroupListResponse = useSelector((state) => state.ConfigurationMaster.groupList);\r\n\r\n    const [groupList , setGroupList] = useState([]);\r\n\r\n    const [params , setParams] = useState({\r\n        pageNo:1,\r\n        pageSize:10,\r\n        filter_value:'',\r\n        sort_column:'',\r\n        sort_order:''\r\n    });\r\n\r\n    const handlePageSizeChange = (param) => {\r\n        setParams({...params,\r\n            pageSize:param.pageSize\r\n        });\r\n    }\r\n    const handlePageChange = (param) => {\r\n        setParams({...params,\r\n            pageNo:param.page + 1\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getAccountGroupBrowse(params));\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getAccountGroupBrowse(params));\r\n    },[params]);\r\n\r\n    useEffect(() => {\r\n        setIsLoading(configurationLoading);\r\n        if(getGroupListResponse){\r\n            setGroupList(getGroupListResponse.data  || [])\r\n         }\r\n    },[getGroupListResponse , configurationLoading]);\r\n\r\n    const onPreviewOrEdit = (row) => {\r\n        dispatch(selectedConfigGroup(row));\r\n        props.onActionClick(1);\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <div style={{ height: 350, width: '100%' }}>\r\n                <DataGrid\r\n                   pagination\r\n                   disableColumnFilter\r\n                   pageSize={params.pageSize}\r\n                  \r\n                   rowsPerPageOptions={[10,20,50,100]}\r\n                   rowCount={getGroupListResponse?.recordsFiltered}\r\n                   paginationMode=\"server\"\r\n                   onPageSizeChange={handlePageSizeChange}\r\n                   onPageChange={handlePageChange}\r\n                   loading={isLoading}                   \r\n                   rowHeight={30}\r\n                   components={{\r\n                       Pagination:CustomPagination,\r\n                       NoRowsOverlay: CustomNoRowsOverlay,\r\n                   }}\r\n                    columns={[\r\n                        {\r\n                            field: 'id',\r\n                            headerName:\"Sr No.\",\r\n                            width:120\r\n                        },\r\n                        {\r\n                            field: 'group_id',\r\n                            headerName:\"Group ID\",\r\n                            width:120\r\n                        },\r\n                        {\r\n                            field: 'group_name',\r\n                            headerName:\"Group Name\",\r\n                            width:200\r\n                        },\r\n                        {\r\n                            field: 'description',\r\n                            headerName:\"Description\",\r\n                            width:200\r\n                        },\r\n                        {\r\n                            field: '',\r\n                            headerName:\"Actions\",\r\n                            renderCell:(params) => (\r\n                                <div className=\"action_btns\">\r\n                                    {/* <i className=\"fas fa-search mr-2\" onClick={() => onPreviewOrEdit(params.row)}></i> */}\r\n                                    <i className=\"far fa-edit mr-2\" onClick={() => onPreviewOrEdit(params.row)}></i>\r\n                                    <i className=\"far fa-trash-alt mr-2\"></i>\r\n                                </div>\r\n                            ),\r\n                            width:150\r\n                        } \r\n                        \r\n                    ]}\r\n                    rows={getGroupListResponse ? getGroupListResponse.data : []}\r\n                />\r\n            </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default ConfigGroupBrowse;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"F:\\\\React code\\\\diagnostic\\\\src\\\\pages\\\\Master\\\\Configuration\\\\product\\\\gg\\\\form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, Select, Button } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport { buttonLoader, showErrorToast, showSuccessToast } from \"../../../../../components/common\";\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\nimport { SimpleTable } from \"../../../../../components/basic-table\";\nimport useForceUpdate from \"use-force-update\";\nimport moment from \"moment\";\nimport { useSelector } from \"react-redux\";\nimport { Loader } from \"../../../../../components/loader\";\nimport { selectedGGId } from \"../../../../../_redux/actions/masters/all.action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddOrEditGG = ({\n  onClose\n}) => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const selectedIdResponse = useSelector(state => state.AllReducersMaster.ggId);\n  const [validator, setValidator] = useState(new SimpleReactValidator());\n  const forceUpdate = useForceUpdate();\n  const [insertParams, setInsertParams] = useState({\n    gg_id: \"0\",\n    gg_name: \"\",\n    qty_value: \"\",\n    description: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n    user_name: localStorage.getItem(\"userName\")\n  });\n  useEffect(() => {\n    if (selectedIdResponse) {\n      CommonController.commonApiCallFilter(\"Configuration/ConfigurationProductGGPreview\", {\n        gg_id: selectedIdResponse\n      }).then(data => {\n        if (data.gg_id) {\n          setInsertParams({ ...insertParams,\n            gg_id: data.gg_id,\n            gg_name: data.gg_name,\n            qty_value: data.qty_value,\n            description: data.description\n          });\n        } else {\n          showErrorToast(\"Something went wrong\");\n        }\n      });\n    }\n  }, [selectedIdResponse]);\n\n  const insertCombo = async () => {\n    if (validator.allValid()) {\n      setLoading(true);\n      CommonController.commonApiCallFilter(\"Configuration/ConfigurationProductGGInsert\", insertParams).then(data => {\n        if (data.valid) {\n          showSuccessToast(\"Successfully Saved\");\n          setLoading(false);\n          onClose();\n        } else {\n          showErrorToast(\"Something went wrong\");\n        }\n      });\n    } else {\n      validator.showMessages(); // rerender to show messages for the first time\n      // you can use the autoForceUpdate option to do this automatically`\n\n      forceUpdate();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid mt-5 pt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            fullWidth: true,\n            size: \"small\",\n            label: \"GG Name*\",\n            value: insertParams.gg_name,\n            onChange: event => {\n              setInsertParams({ ...insertParams,\n                gg_name: event.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-danger\",\n            children: validator.message(\"GG Name\", insertParams.gg_name, \"required\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: [/*#__PURE__*/_jsxDEV(Select, {\n            variant: \"outlined\",\n            fullWidth: true,\n            size: \"small\",\n            label: \"Qty/Value*\",\n            value: insertParams.qty_value,\n            onChange: event => {\n              setInsertParams({ ...insertParams,\n                qty_value: event.target.value\n              });\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Qty\",\n              children: \"Qty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Value\",\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-danger\",\n            children: validator.message(\"Qty/Value\", insertParams.qty_value, \"required\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            variant: \"outlined\",\n            fullWidth: true,\n            size: \"small\",\n            multiline: true,\n            label: \"Description\",\n            value: insertParams.description,\n            onChange: event => {\n              setInsertParams({ ...insertParams,\n                description: event.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-100 text-right mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => onClose(),\n          variant: \"contained\",\n          className: \"mr-2\",\n          color: \"primary\",\n          disableElevation: true,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), buttonLoader(loading, \"Save\", insertCombo, \"primary\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddOrEditGG, \"jrY2I+ZCRdOJep68kEzlpX58MRY=\", false, function () {\n  return [useSelector, useForceUpdate];\n});\n\n_c = AddOrEditGG;\nexport default AddOrEditGG;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddOrEditGG\");","map":{"version":3,"sources":["F:/React code/diagnostic/src/pages/Master/Configuration/product/gg/form.js"],"names":["React","useEffect","useState","TextField","Select","Button","Autocomplete","DatePicker","SimpleReactValidator","buttonLoader","showErrorToast","showSuccessToast","CommonController","SimpleTable","useForceUpdate","moment","useSelector","Loader","selectedGGId","AddOrEditGG","onClose","loading","setLoading","selectedIdResponse","state","AllReducersMaster","ggId","validator","setValidator","forceUpdate","insertParams","setInsertParams","gg_id","gg_name","qty_value","description","user_id","localStorage","getItem","user_name","commonApiCallFilter","then","data","insertCombo","allValid","valid","showMessages","event","target","value","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Select, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedGGId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditGG = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.ggId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    gg_id: \"0\",\r\n    gg_name: \"\",\r\n    qty_value: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductGGPreview\",\r\n        {\r\n          gg_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.gg_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            gg_id: data.gg_id,\r\n            gg_name: data.gg_name,\r\n            qty_value: data.qty_value,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductGGInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"GG Name*\"\r\n              value={insertParams.gg_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  gg_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\"GG Name\", insertParams.gg_name, \"required\")}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <Select\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Qty/Value*\"\r\n              value={insertParams.qty_value}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  qty_value: event.target.value,\r\n                });\r\n              }}\r\n            >\r\n              <option value=\"\"></option>\r\n              <option value=\"Qty\">Qty</option>\r\n              <option value=\"Value\">Value</option>\r\n            </Select>\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Qty/Value\",\r\n                insertParams.qty_value,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditGG;\r\n"]},"metadata":{},"sourceType":"module"}
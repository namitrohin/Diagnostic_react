{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { getCategoryList, getCategoryListSuccess, getGGNameList, getGGNameListSuccess, getLPRefList, getLPRefListSuccess, getProductListBrowse, getProductListBrowseSuccess, updateProductListPrice, updateProductListPriceSuccess, updateProductLPRef, updateProductMovingNonMoving, updateProductVerifiedStatus } from \"../../actions/masters/product.action\";\nimport { ProductMasterController } from \"../../controller/Masters/product.controller\";\n\nfunction* getProductBrowseSaga(action) {\n  try {\n    const listValue = yield ProductMasterController.getProductBrowse(action.payload.params, action.payload.filters);\n    yield put(getProductListBrowseSuccess(listValue));\n  } catch (error) {\n    yield null;\n    yield put(getProductListBrowseSuccess(error));\n  }\n}\n\nfunction* getCategoryListSaga(action) {\n  try {\n    const response = yield ProductMasterController.getCategoryList();\n    yield put(getCategoryListSuccess(response));\n  } catch (error) {\n    yield null;\n    yield put(getCategoryListSuccess(error));\n  }\n}\n\nfunction* getLPRefListSaga(action) {\n  try {\n    const response = yield ProductMasterController.getLPRefList();\n    yield put(getLPRefListSuccess(response));\n  } catch (error) {\n    yield null;\n    yield put(getLPRefListSuccess(error));\n  }\n}\n\nfunction* getGGNameListSaga(action) {\n  try {\n    const response = yield ProductMasterController.getGGNameList();\n    yield put(getGGNameListSuccess(response));\n  } catch (error) {\n    yield null;\n    yield put(getGGNameListSuccess(error));\n  }\n}\n\nfunction* updateProductVerifiedStatusSaga(action) {\n  try {\n    const response = yield ProductMasterController.updateProductVerifyStatus(action.payload.param);\n    yield put(getGGNameListSuccess(response));\n  } catch (error) {\n    yield null;\n    yield put(getGGNameListSuccess(error));\n  }\n}\n\nfunction* updateProductListPriceSaga(action) {\n  try {\n    const response = yield ProductMasterController.updateProductListPrice(action.payload.param);\n    yield null;\n  } catch (error) {\n    yield null; // yield put(updateProductListPriceSuccess(error));\n  }\n}\n\nfunction* updateProductLPRefSaga(action) {\n  try {\n    const response = yield ProductMasterController.updateProductLpRef(action.payload.param);\n    yield null;\n  } catch (error) {\n    yield null; // yield put(updateProductListPriceSuccess(error));\n  }\n}\n\nfunction* updateProductMovingSaga(action) {\n  try {\n    const response = yield ProductMasterController.updateProductMovingNonMoving(action.payload.param);\n    yield null;\n  } catch (error) {\n    yield null; // yield put(updateProductListPriceSuccess(error));\n  }\n}\n\nexport default function* ProductMasterSaga() {\n  try {\n    yield takeLatest(getProductListBrowse, getProductBrowseSaga);\n    yield takeLatest(getCategoryList, getCategoryListSaga);\n    yield takeLatest(getLPRefList, getLPRefListSaga);\n    yield takeLatest(getGGNameList, getGGNameListSaga);\n    yield takeLatest(updateProductVerifiedStatus, updateProductVerifiedStatusSaga);\n    yield takeLatest(updateProductListPrice, updateProductListPriceSaga);\n    yield takeLatest(updateProductLPRef, updateProductLPRefSaga);\n    yield takeLatest(updateProductMovingNonMoving, updateProductMovingSaga);\n  } catch (e) {\n    yield null;\n  }\n}\n_c = ProductMasterSaga;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductMasterSaga\");","map":{"version":3,"sources":["F:/React code/diagnostic/src/_redux/middleware/Masters/product.saga.js"],"names":["put","takeLatest","getCategoryList","getCategoryListSuccess","getGGNameList","getGGNameListSuccess","getLPRefList","getLPRefListSuccess","getProductListBrowse","getProductListBrowseSuccess","updateProductListPrice","updateProductListPriceSuccess","updateProductLPRef","updateProductMovingNonMoving","updateProductVerifiedStatus","ProductMasterController","getProductBrowseSaga","action","listValue","getProductBrowse","payload","params","filters","error","getCategoryListSaga","response","getLPRefListSaga","getGGNameListSaga","updateProductVerifiedStatusSaga","updateProductVerifyStatus","param","updateProductListPriceSaga","updateProductLPRefSaga","updateProductLpRef","updateProductMovingSaga","ProductMasterSaga","e"],"mappings":"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","sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { getCategoryList, getCategoryListSuccess, getGGNameList, getGGNameListSuccess, getLPRefList, getLPRefListSuccess, getProductListBrowse, getProductListBrowseSuccess, updateProductListPrice, updateProductListPriceSuccess, updateProductLPRef, updateProductMovingNonMoving, updateProductVerifiedStatus } from \"../../actions/masters/product.action\";\r\nimport { ProductMasterController } from \"../../controller/Masters/product.controller\";\r\n\r\nfunction* getProductBrowseSaga (action) {\r\n    try {   \r\n        const listValue = yield ProductMasterController.getProductBrowse(action.payload.params, action.payload.filters);\r\n        yield put(getProductListBrowseSuccess(listValue));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getProductListBrowseSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getCategoryListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getCategoryList();\r\n        yield put(getCategoryListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getCategoryListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getLPRefListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getLPRefList();\r\n        yield put(getLPRefListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getLPRefListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getGGNameListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getGGNameList();\r\n        yield put(getGGNameListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getGGNameListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductVerifiedStatusSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductVerifyStatus(action.payload.param);\r\n        yield put(getGGNameListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getGGNameListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductListPriceSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductListPrice(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* updateProductLPRefSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductLpRef(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductMovingSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductMovingNonMoving(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nexport default function* ProductMasterSaga () {\r\n    try {\r\n        yield takeLatest(getProductListBrowse, getProductBrowseSaga);\r\n        yield takeLatest(getCategoryList, getCategoryListSaga);   \r\n        yield takeLatest(getLPRefList, getLPRefListSaga);   \r\n        yield takeLatest(getGGNameList, getGGNameListSaga);   \r\n        yield takeLatest(updateProductVerifiedStatus, updateProductVerifiedStatusSaga);   \r\n        yield takeLatest(updateProductListPrice, updateProductListPriceSaga);   \r\n        yield takeLatest(updateProductLPRef, updateProductLPRefSaga);   \r\n        yield takeLatest(updateProductMovingNonMoving, updateProductMovingSaga);   \r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
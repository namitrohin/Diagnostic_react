{"ast":null,"code":"import produce from \"immer\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport * as actions from \"../actions/auth.action\";\nconst initialState = {\n  isAuthenticated: false,\n  token: null,\n  loadingStatus: false,\n  responseMessage: '',\n  isValidCred: false,\n  getOtpResponse: {},\n  decryptUserDetails: null\n};\nexport const authReducer = createReducer(initialState, {\n  [actions.requestStatus.toString()]: (state, action) => produce(state, draft => {\n    draft.loadingStatus = action.payload;\n  }),\n  [actions.checkAuthCredResponse.toString()]: (state, action) => produce(state, draft => {\n    draft.isValidCred = action.payload.valid;\n    draft.responseMessage = action.payload.valid ? \"\" : \"Username or Password is not correct\";\n  }),\n  [actions.checkAuthOTPResponse.toString()]: (state, action) => produce(state, draft => {\n    console.log(action.payload);\n\n    if (action.payload.access_token) {\n      draft.getOtpResponse.valid = true;\n      draft.getOtpResponse.access_token = action.payload.access_token;\n      draft.getOtpResponse.expires_in = action.payload.expires_in;\n      draft.getOtpResponse['.issued'] = action.payload['.issued'];\n      draft.getOtpResponse['.expires'] = action.payload['.expires'];\n      draft.getOtpResponse.userId = action.payload.userId;\n      draft.getOtpResponse.userName = action.payload.userName;\n      draft.getOtpResponse.code = action.payload.code;\n      draft.getOtpResponse.encrypt_userId = action.payload.encrypt_userId;\n    } else {\n      draft.getOtpResponse.valid = false;\n      draft.getOtpResponse.message = \"OTP is incorrect\";\n    }\n  }),\n  [actions.getDecryptUserId.toString()]: (state, action) => produce(state, draft => {}),\n  [actions.getDecryptUserIdResponse.toString()]: (state, action) => produce(state, draft => {\n    draft.decryptUserDetails = action.payload;\n  })\n});","map":{"version":3,"sources":["F:/React code/diagnostic/src/_redux/reducers/auth.reducer.js"],"names":["produce","createReducer","actions","initialState","isAuthenticated","token","loadingStatus","responseMessage","isValidCred","getOtpResponse","decryptUserDetails","authReducer","requestStatus","toString","state","action","draft","payload","checkAuthCredResponse","valid","checkAuthOTPResponse","console","log","access_token","expires_in","userId","userName","code","encrypt_userId","message","getDecryptUserId","getDecryptUserIdResponse"],"mappings":"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","sourcesContent":["import produce from \"immer\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport * as actions from \"../actions/auth.action\";\r\n\r\nconst initialState = {\r\n    isAuthenticated:false,\r\n    token:null,\r\n    loadingStatus:false,\r\n    responseMessage:'',\r\n    isValidCred:false,\r\n    getOtpResponse:{},\r\n    decryptUserDetails:null\r\n}\r\n\r\n\r\nexport const authReducer = createReducer(initialState, {\r\n    [actions.requestStatus.toString()]: (state, action) =>\r\n        produce (state, (draft) => {\r\n            draft.loadingStatus = action.payload;\r\n    }),\r\n\r\n    [actions.checkAuthCredResponse.toString()]: (state, action) =>\r\n        produce (state, (draft) => {\r\n            draft.isValidCred = action.payload.valid;\r\n            draft.responseMessage = action.payload.valid ? \"\" : \"Username or Password is not correct\"\r\n    }),\r\n    [actions.checkAuthOTPResponse.toString()]: (state, action) =>\r\n        produce (state, (draft) => {\r\n            console.log(action.payload)\r\n             if(action.payload.access_token){\r\n                 draft.getOtpResponse.valid = true;\r\n                 draft.getOtpResponse.access_token = action.payload.access_token;\r\n                 draft.getOtpResponse.expires_in = action.payload.expires_in;\r\n                 draft.getOtpResponse['.issued'] = action.payload['.issued'];\r\n                 draft.getOtpResponse['.expires'] = action.payload['.expires'];\r\n                 draft.getOtpResponse.userId = action.payload.userId;\r\n                 draft.getOtpResponse.userName = action.payload.userName;\r\n                 draft.getOtpResponse.code = action.payload.code;\r\n                 draft.getOtpResponse.encrypt_userId = action.payload.encrypt_userId;\r\n             }\r\n             else{\r\n                draft.getOtpResponse.valid = false;\r\n                draft.getOtpResponse.message = \"OTP is incorrect\";\r\n             }\r\n    }),\r\n    [actions.getDecryptUserId.toString()]: (state, action) =>\r\n    produce (state, (draft) => {}),\r\n    [actions.getDecryptUserIdResponse.toString()]: (state, action) =>\r\n    produce (state, (draft) => {\r\n        draft.decryptUserDetails = action.payload;\r\n    }),\r\n});"]},"metadata":{},"sourceType":"module"}
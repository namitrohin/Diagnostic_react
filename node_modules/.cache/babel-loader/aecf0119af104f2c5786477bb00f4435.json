{"ast":null,"code":"import { userService } from \"../../services\";\nexport const CommonController = {\n  getUserRightsList,\n  currenyMasking,\n  getUserFilterList,\n  tablePickerController,\n  commonApiCall,\n  commonApiCallFilter,\n  commonJsonUpdate,\n  commonApiFile\n};\n\nasync function getUserRightsList() {\n  try {\n    let apiEndpoint = `usermenu/GetUserMenuList?user_id=${localStorage.getItem(\"userId\")}`;\n    let response = await userService.get(apiEndpoint);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function getUserFilterList() {\n  try {\n    let apiEndpoint = `user/get_user_filter?user_id=${localStorage.getItem(\"userId\")}`;\n    let response = await userService.localget(apiEndpoint);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nexport function currenyMasking(val) {\n  var format = new Intl.NumberFormat(\"en-IN\", {\n    style: \"currency\",\n    currency: \"INR\",\n    minimumFractionDigits: 2\n  }); // var x = val.toString();\n  // var lastThree = x.substring(x.length-3);\n  // var otherNumbers = x.substring(0,x.length-3);\n  // if(otherNumbers != '')\n  //     lastThree = ',' + lastThree;\n  // var res = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree;\n\n  return format.format(parseFloat(val).toFixed(2));\n}\n\nasync function tablePickerController(url, params, domain = \"\") {\n  console.log(domain);\n\n  try {\n    let apiEndpoint = `${url}?filter_value=${params.filter_value}&page_number=${params.pageNo}&page_size=${params.pageSize}&sort_column=${params.sort_column}&sort_order=${params.sort_order}`;\n    let response = await userService.post(apiEndpoint, {}, domain);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function commonApiCall(url, params, body, domain) {\n  try {\n    let apiEndpoint = `${url}?filter_value=${params.filter_value}&page_number=${params.pageNo}&page_size=${params.pageSize}&sort_column=${params.sort_column}&sort_order=${params.sort_order}`;\n    let response = await userService.post(apiEndpoint, body, domain);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function commonApiFile(url, body) {\n  try {\n    let apiEndpoint = url;\n    let response = await userService.image(apiEndpoint, body);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function commonApiCallFilter(url, body, type = \"post\", domain = \"\") {\n  console.log(body);\n\n  try {\n    let apiEndpoint = `${url}`;\n    let response;\n\n    if (type === \"post\") {\n      response = await userService.post(apiEndpoint, body, domain);\n    } else {\n      let queryString = Object.keys(body).map(key => key + \"=\" + body[key]).join(\"&\");\n\n      let _url = url + \"?\" + queryString;\n\n      response = await userService.get(_url, domain);\n    }\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}\n\nasync function commonJsonUpdate(url, body) {\n  try {\n    let apiEndpoint = `${url}`;\n    let response = await userService.jsonpost(apiEndpoint, body);\n\n    if (response) {\n      return response.data;\n    } else {\n      if (response.data.status !== 500) {\n        alert(response.data);\n      }\n\n      return null;\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return null;\n  }\n}","map":{"version":3,"sources":["F:/React code/diagnostic/src/_redux/controller/common.controller.js"],"names":["userService","CommonController","getUserRightsList","currenyMasking","getUserFilterList","tablePickerController","commonApiCall","commonApiCallFilter","commonJsonUpdate","commonApiFile","apiEndpoint","localStorage","getItem","response","get","data","status","alert","error","console","log","localget","val","format","Intl","NumberFormat","style","currency","minimumFractionDigits","parseFloat","toFixed","url","params","domain","filter_value","pageNo","pageSize","sort_column","sort_order","post","body","image","type","queryString","Object","keys","map","key","join","_url","jsonpost"],"mappings":"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","sourcesContent":["import { userService } from \"../../services\";\r\n\r\nexport const CommonController = {\r\n  getUserRightsList,\r\n  currenyMasking,\r\n  getUserFilterList,\r\n  tablePickerController,\r\n  commonApiCall,\r\n  commonApiCallFilter,\r\n  commonJsonUpdate,\r\n  commonApiFile,\r\n};\r\n\r\nasync function getUserRightsList() {\r\n  try {\r\n    let apiEndpoint = `usermenu/GetUserMenuList?user_id=${localStorage.getItem(\r\n      \"userId\"\r\n    )}`;\r\n\r\n    let response = await userService.get(apiEndpoint);\r\n\r\n    if (response) {\r\n      return response.data;\r\n    } else {\r\n      if (response.data.status !== 500) {\r\n        alert(response.data);\r\n      }\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function getUserFilterList() {\r\n  try {\r\n    let apiEndpoint = `user/get_user_filter?user_id=${localStorage.getItem(\r\n      \"userId\"\r\n    )}`;\r\n\r\n    let response = await userService.localget(apiEndpoint);\r\n\r\n    if (response) {\r\n      return response.data;\r\n    } else {\r\n      if (response.data.status !== 500) {\r\n        alert(response.data);\r\n      }\r\n      return null;\r\n    }\r\n  } catch (error) { \r\n    console.log(\"error\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function currenyMasking(val) {\r\n  var format = new Intl.NumberFormat(\"en-IN\", {\r\n    style: \"currency\",\r\n    currency: \"INR\",\r\n    minimumFractionDigits: 2,\r\n  });\r\n  // var x = val.toString();\r\n  // var lastThree = x.substring(x.length-3);\r\n  // var otherNumbers = x.substring(0,x.length-3);\r\n  // if(otherNumbers != '')\r\n  //     lastThree = ',' + lastThree;\r\n  // var res = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree;\r\n  return format.format(parseFloat(val).toFixed(2));\r\n}\r\n\r\nasync function tablePickerController(url, params, domain = \"\") {\r\n  console.log(domain);\r\n  try {\r\n    let apiEndpoint = `${url}?filter_value=${params.filter_value}&page_number=${params.pageNo}&page_size=${params.pageSize}&sort_column=${params.sort_column}&sort_order=${params.sort_order}`;\r\n    let response = await userService.post(apiEndpoint, {}, domain);\r\n\r\n    if (response) {\r\n      return response.data;\r\n    } else {\r\n      if (response.data.status !== 500) {\r\n        alert(response.data);\r\n      }\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function commonApiCall(url, params, body, domain) {\r\n  try {\r\n    let apiEndpoint = `${url}?filter_value=${params.filter_value}&page_number=${params.pageNo}&page_size=${params.pageSize}&sort_column=${params.sort_column}&sort_order=${params.sort_order}`;\r\n    let response = await userService.post(apiEndpoint, body, domain);\r\n    if (response) {\r\n      return response.data;\r\n    } else {\r\n      if (response.data.status !== 500) {\r\n        alert(response.data);\r\n      }\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function commonApiFile(url, body) {\r\n  try {\r\n    let apiEndpoint = url;\r\n    let response = await userService.image(apiEndpoint, body);\r\n    if (response) {\r\n      return response.data;\r\n    } else {\r\n      if (response.data.status !== 500) {\r\n        alert(response.data);\r\n      }\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function commonApiCallFilter(url, body, type = \"post\", domain = \"\") {\r\n  console.log(body)\r\n  try {\r\n    let apiEndpoint = `${url}`;\r\n    let response;\r\n    if (type === \"post\") {\r\n      response = await userService.post(apiEndpoint, body, domain);\r\n    } else {\r\n      let queryString = Object.keys(body)\r\n        .map((key) => key + \"=\" + body[key])\r\n        .join(\"&\");\r\n      let _url = url + \"?\" + queryString;\r\n      response = await userService.get(_url, domain);\r\n    }\r\n\r\n    if (response) {\r\n      return response.data;\r\n    } else {\r\n      if (response.data.status !== 500) {\r\n        alert(response.data);\r\n      }\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function commonJsonUpdate(url, body) {\r\n  try {\r\n    let apiEndpoint = `${url}`;\r\n    let response = await userService.jsonpost(apiEndpoint, body);\r\n\r\n    if (response) {\r\n      return response.data;\r\n    } else {\r\n      if (response.data.status !== 500) {\r\n        alert(response.data);\r\n      }\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"error\", error);\r\n    return null;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}